function net = NNGenerator(input,gestures,hiddenLayerS)

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 12-Nov-2018 21:49:21
%
% This script assumes these variables are defined:
%
%   input - input data.
%   gestures - target data.

x = input';
t = gestures';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = hiddenLayerS;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Show or does not the NN window
net.trainParam.showWindow = 0; 
% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
%performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
figure, plotroc(t,y);

  
  [tpr,fpr,thresholds] = roc(t,y);
  

  tpr = vertcat(tpr{:});
  
 %  figure, plot(roc(t,y))
%   xlabel('number of samples (t)');
%   ylabel('TP ratio');

  net = trapz(mean(tpr))/size(tpr,2);
  
  



end